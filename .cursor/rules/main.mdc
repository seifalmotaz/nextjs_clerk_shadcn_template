---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for "I Am Not Helpful" AI Project

## Project Overview
This is a Next.js application that creates an AI assistant designed to provide critical, challenging feedback rather than validation. The AI helps users improve their ideas through constructive opposition and critical thinking.

## Tech Stack
- Next.js 14 with App Router
- TypeScript
- Tailwind CSS
- Clerk for authentication
- OpenRouter API with Vercel AI SDK
- PostgreSQL for data persistence
- Vercel for deployment

## Code Style & Standards

### General Guidelines
- Use TypeScript for all files
- Prefer functional components with hooks
- Use server components where possible for better performance
- Implement proper error boundaries and loading states
- Follow Next.js App Router conventions

### File Structure
```
src/
├── app/
│   ├── (auth)/
│   ├── (dashboard)/
│   ├── api/
│   ├── globals.css
│   ├── layout.tsx
│   └── page.tsx
├── components/
│   ├── ui/
│   ├── chat/
│   ├── auth/
│   └── layout/
├── lib/
│   ├── db/
│   ├── ai/
│   ├── utils.ts
│   └── types.ts
├── hooks/
└── constants/
```

### Naming Conventions
- Use kebab-case for file and folder names
- Use PascalCase for React components
- Use camelCase for functions and variables
- Use SCREAMING_SNAKE_CASE for constants
- Prefix custom hooks with "use"

### Component Guidelines
- Keep components small and focused (max 150 lines)
- Use composition over inheritance
- Implement proper prop typing with TypeScript
- Use React.memo for performance optimization when needed
- Always include loading and error states

### AI Integration Rules
- All AI interactions must go through the `/api/chat` endpoint
- Implement rate limiting to prevent abuse
- Always include error handling for AI API failures
- Stream responses for better UX
- Log AI interactions for debugging (without sensitive data)

### Database Guidelines
- Use Prisma for database operations
- Implement proper error handling for all DB operations
- Use transactions for multi-step operations
- Index frequently queried fields
- Implement soft deletes where appropriate

### Authentication & Security
- Always check user authentication status
- Implement proper CORS policies
- Sanitize all user inputs
- Use environment variables for sensitive data
- Implement rate limiting on API endpoints

### Performance Optimization
- Use Next.js Image component for all images
- Implement lazy loading for heavy components
- Use dynamic imports for code splitting
- Optimize bundle size with tree shaking
- Implement caching strategies for API responses

### Error Handling
- Use try-catch blocks for all async operations
- Implement global error boundary
- Log errors with proper context
- Provide user-friendly error messages
- Handle network failures gracefully

### Testing Guidelines
- Write unit tests for utility functions
- Implement integration tests for API endpoints
- Use React Testing Library for component tests
- Mock external dependencies
- Aim for 80%+ code coverage

## AI Prompt Engineering

### Core Principles
- The AI should NEVER immediately agree with user ideas
- Always find 2-3 potential issues or areas for improvement
- Ask probing questions that expose assumptions
- Maintain a helpful but challenging tone
- Focus on constructive criticism, not destruction

### Prompt Structure
```typescript
const SYSTEM_PROMPT = `
You are a critical thinking AI assistant. Your role is to challenge ideas and help users improve them through constructive opposition.

NEVER:
- Immediately agree with or praise user ideas
- Provide generic positive feedback
- Give step-by-step implementation guides without criticism

ALWAYS:
- Find potential flaws, gaps, or weaknesses
- Ask challenging questions about assumptions
- Provide specific, actionable criticism
- Maintain a direct but constructive tone
- Focus on improving the idea, not destroying it

Response format:
1. Identify 2-3 specific issues with the idea
2. Ask 2-3 probing questions
3. Suggest what needs strengthening (without giving solutions)
`;
```

### Response Categories
- **Business Ideas**: Challenge market assumptions, feasibility, competition
- **Writing**: Question plot, character development, target audience
- **Projects**: Examine timelines, resources, risk factors
- **Creative Work**: Challenge originality, execution, impact

## API Design

### Endpoint Structure
- `/api/auth/*` - Authentication routes
- `/api/chat` - Main AI chat endpoint
- `/api/conversations` - Conversation management
- `/api/user` - User profile management

### Request/Response Format
```typescript
// Chat API Request
interface ChatRequest {
  message: string;
  conversationId?: string;
  challengeMode?: 'skeptic' | 'devil-advocate' | 'reality-check';
}

// Chat API Response
interface ChatResponse {
  response: string;
  conversationId: string;
  challengesFocused: string[];
  followUpQuestions: string[];
}
```

## Environment Variables
```
# Database
DATABASE_URL=

# Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=
CLERK_SECRET_KEY=

# AI
OPENROUTER_API_KEY=

# App
NEXT_PUBLIC_APP_URL=
```

## Development Guidelines

### Before Committing
- Run type checking: `npm run type-check`
- Run linting: `npm run lint`
- Run tests: `npm run test`
- Check build: `npm run build`

### Code Review Focus
- TypeScript types are properly defined
- Error handling is implemented
- Performance considerations are addressed
- AI responses maintain critical stance
- User experience is smooth and intuitive

### Deployment Checklist
- Environment variables are set
- Database migrations are run
- API endpoints are tested
- AI prompts are optimized
- Rate limiting is configured
- Error monitoring is enabled

## Special Considerations

### AI Response Quality
- Test prompts extensively to ensure consistent critical feedback
- Monitor AI responses for inappropriate harshness
- Implement feedback loops to improve response quality
- A/B test different prompt variations

### User Experience
- Balance critical feedback with usability
- Provide clear indicators that AI is being intentionally challenging
- Implement conversation management features
- Allow users to adjust challenge intensity

### Scalability
- Design for horizontal scaling
- Implement caching for frequently requested data
- Use CDN for static assets
- Monitor API usage and costs

Remember: The goal is to create an AI that helps users through challenge and critical thinking, not one that discourages or destroys ideas. The criticism should always be constructive and aimed at improvement.